/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2023-01-27 01:13:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.nhy_005fjsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import nhy_java.notice.CommentDto;
import java.io.PrintWriter;
import nhy_java.notice.NoticeDto;
import java.util.List;
import nhy_java.dao.Dao;

public final class noticeRead_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("nhy_java.notice.NoticeDto");
    _jspx_imports_classes.add("nhy_java.notice.CommentDto");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("nhy_java.dao.Dao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

if(session.getAttribute("userId")==null){
	PrintWriter writer = response.getWriter();
	writer.println("<script>");
	writer.println("alert('로그인을 해주세요')");
	writer.println("window.parent.location.href='login.jsp'");
	writer.println("</script>");
}

Dao dao = Dao.getInstance();

int idx = Integer.parseInt(request.getParameter("idx"));

NoticeDto noticeDto = dao.notice_selectOne(idx);

if(!((String)session.getAttribute("userId")).equals(noticeDto.getAuthor())){
	dao.notice_addHit(idx);
}

List<CommentDto> commentList = dao.notice_comment_select(idx);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Notice</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/reset.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/noticeWrite.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/noticeAside.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"mainDiv\">\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "noticeAside.jsp", out, false);
      out.write("\r\n");
      out.write("		<section id=\"main\" align=center>\r\n");
      out.write("			<h1 align=\"left\">공지사항 읽기</h1>\r\n");
      out.write("			<div>\r\n");
      out.write("				<form action=\"noticeModify.jsp?idx=");
      out.print(idx );
      out.write("\" name=\"boardForm\" enctype=\"multipart/form-data\" method=\"post\">\r\n");
      out.write("					<div id=\"titleDiv\" align=\"left\">\r\n");
      out.write("						<input id=\"title\" type=\"text\" name=\"title\" placeholder=\"제목\"\r\n");
      out.write("							value=\"");
      out.print(noticeDto.getTitle() );
      out.write("\" readonly>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div id=\"contentDiv\">\r\n");
      out.write("						<textarea id=\"content\" name=\"content\" rows=\"30\" placeholder=\"내용\"\r\n");
      out.write("							readonly>");
      out.print(noticeDto.getContent() );
      out.write("</textarea>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div align=\"left\">\r\n");
      out.write("						첨부파일 :\r\n");
      out.write("						");

						if (noticeDto.getSaveFileName() == null) {
						
      out.write("\r\n");
      out.write("						없음\r\n");
      out.write("						");

						} else {
						
      out.write("\r\n");
      out.write("						<a href=\"noticeFileDownloadAction.jsp?fileName=");
      out.print(noticeDto.getRealFileName());
      out.write('"');
      out.write('>');
      out.print(noticeDto.getSaveFileName());
      out.write("</a>\r\n");
      out.write("						");

						}
						
      out.write("\r\n");
      out.write("					</div>\r\n");
      out.write("					<div align=\"right\">\r\n");
      out.write("						<input type=\"button\" formtarget=\"iframe1\" onclick=\"history.back()\" value=\"뒤로가기\">\r\n");
      out.write("						");

						if(((String)session.getAttribute("userId")).equals(noticeDto.getAuthor())){
						
      out.write("\r\n");
      out.write("						<button type=\"submit\">글 수정</button>\r\n");
      out.write("						");

						}
						
      out.write("\r\n");
      out.write("					</div>\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("			<h1 align=\"left\">댓글입력</h1>\r\n");
      out.write("			<div>\r\n");
      out.write("				<form id=\"commentForm\">\r\n");
      out.write("					<input type=\"hidden\" name=\"notice_idx\" value=\"");
      out.print(idx);
      out.write("\">\r\n");
      out.write("					<div id=\"commentDiv\" align=\"left\">\r\n");
      out.write("						<textarea id=\"comment_content\" type=\"text\" name=\"comment_content\" rows=\"3\" placeholder=\"댓글을 입력해주세요.\"></textarea>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div align=\"right\">\r\n");
      out.write("						<input type=\"button\" onclick=\"addComment()\" value=\"입력\">\r\n");
      out.write("					</div>\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("			");
 
			if(commentList.size()>0){
			
      out.write("\r\n");
      out.write("				<h1 align=\"left\">댓글목록</h1>\r\n");
      out.write("				<div id=\"commentListDiv\">\r\n");
      out.write("				<!-- for문으로 넣어줌 -->\r\n");
      out.write("				");

				for(int i=0; i<commentList.size(); i++){
					CommentDto commentDto = commentList.get(i);
				
      out.write("\r\n");
      out.write("					<form class=\"commentList\" align=\"left\">\r\n");
      out.write("						<div class=\"commentHeader\">\r\n");
      out.write("							<div>\r\n");
      out.write("								");
      out.print(commentDto.getAuthor() );
      out.write(' ');
      out.write('/');
      out.write(' ');
      out.print(commentDto.getCreateDate() );
      out.write("\r\n");
      out.write("							</div>\r\n");
      out.write("							<div>\r\n");
      out.write("								");

								if(commentDto.getAuthor().equals((String)session.getAttribute("userId"))){
								
      out.write("\r\n");
      out.write("								<input class=\"commentModifyBtn\" type=\"button\" onclick=\"modifyComment(this, ");
      out.print(idx);
      out.write(',');
      out.write(' ');
      out.print(commentDto.getComment_idx());
      out.write(")\" value=\"수정\">\r\n");
      out.write("								<input type=\"button\" onclick=\"deleteComment(");
      out.print(idx);
      out.write(',');
      out.write(' ');
      out.print(commentDto.getComment_idx());
      out.write(")\" value=\"삭제\">\r\n");
      out.write("								");

								}
								
      out.write("\r\n");
      out.write("							</div>					\r\n");
      out.write("						</div>\r\n");
      out.write("						<div>\r\n");
      out.write("							<p class=\"commentContent\">\r\n");
      out.write("								");
      out.print(commentDto.getContent() );
      out.write("\r\n");
      out.write("							</p>\r\n");
      out.write("						</div>\r\n");
      out.write("					</form>\r\n");
      out.write("				");

				}
				
      out.write("\r\n");
      out.write("			");

			}
			
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("		</section>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("		function addComment(){\r\n");
      out.write("			let comment = document.getElementById('comment_content').value;\r\n");
      out.write("			if(comment==null || comment==''){\r\n");
      out.write("				alert('댓글이 입력되지 않았습니다.');\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			let commentForm = document.getElementById('commentForm');\r\n");
      out.write("			let formData = new FormData(commentForm);\r\n");
      out.write("			fetch('./noticeCommentWriteAction.jsp', {\r\n");
      out.write("				method:'POST',\r\n");
      out.write("				body: new URLSearchParams(formData)\r\n");
      out.write("			})\r\n");
      out.write("			.then(res => res.json())\r\n");
      out.write("			.then(data => {				\r\n");
      out.write("					if(data['result']==1){\r\n");
      out.write("						alert('댓글이 작성되었습니다.');\r\n");
      out.write("						location.href='noticeRead.jsp?idx=");
      out.print(idx);
      out.write("';\r\n");
      out.write("						\r\n");
      out.write("						");
      out.write("\r\n");
      out.write("					} else {\r\n");
      out.write("						alert('댓글 작성에 실패하였습니다.\\r\\n관리자에게 문의해주세요.');\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function deleteComment(notice_idx, comment_idx){\r\n");
      out.write("			if (confirm(\"정말로 댓글을 삭제하시겠습니까?\")) {\r\n");
      out.write("				fetch('./noticeCommentDeleteAction.jsp',{\r\n");
      out.write("					method:'post',\r\n");
      out.write("					body:new URLSearchParams({\r\n");
      out.write("						'notice_idx' : notice_idx,\r\n");
      out.write("						'comment_idx' : comment_idx\r\n");
      out.write("					})\r\n");
      out.write("				})\r\n");
      out.write("				.then(res=>res.json())\r\n");
      out.write("				.then(function(data){\r\n");
      out.write("					if(data['result']>0){\r\n");
      out.write("						alert('댓글이 삭제되었습니다.');\r\n");
      out.write("						location.href='noticeRead.jsp?idx=");
      out.print(idx);
      out.write("';\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function modifyComment(commentModifyBtn, notice_idx, comment_idx){\r\n");
      out.write("			let parent = commentModifyBtn.parentNode.parentNode.parentNode;\r\n");
      out.write("			if(!parent.classList.contains('modifyActive')){\r\n");
      out.write("				parent.classList.add('modifyActive');\r\n");
      out.write("				let modifyCommentDiv = document.createElement('div');\r\n");
      out.write("				modifyCommentDiv.innerHTML =\r\n");
      out.write("					'<div align=\"right\">'+\r\n");
      out.write("					'<input type=\"button\" onclick=\"modifyConfirm(this, '+ notice_idx + ',' + comment_idx + ')\" value=\"확인\">' +\r\n");
      out.write("					'<input type=\"button\" onclick=\"modifyCancel(this)\" value=\"취소\">' +\r\n");
      out.write("					'</div>'+\r\n");
      out.write("					'<div>'+\r\n");
      out.write("					'<textarea style=\"width:100%; resize: none;\"></textarea>'+\r\n");
      out.write("					'</div>'\r\n");
      out.write("					;\r\n");
      out.write("				commentModifyBtn.parentNode.parentNode.parentNode.appendChild(modifyCommentDiv);				\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function modifyConfirm(modifyCommentDiv, notice_idx, comment_idx){\r\n");
      out.write("			let modifyContent = modifyCommentDiv.parentNode.nextElementSibling.firstChild.value;\r\n");
      out.write("			if(modifyContent==null || modifyContent==''){\r\n");
      out.write("				alert('댓글이 입력되지 않았습니다.');\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			if (confirm(\"정말로 댓글을 수정하시겠습니까?\")) {\r\n");
      out.write("				fetch('./noticeCommentModifyAction.jsp',{\r\n");
      out.write("					method:'post',\r\n");
      out.write("					body:new URLSearchParams({\r\n");
      out.write("						'notice_idx' : notice_idx,\r\n");
      out.write("						'comment_idx' : comment_idx,\r\n");
      out.write("						'modifyContent' : modifyContent\r\n");
      out.write("					})\r\n");
      out.write("				})\r\n");
      out.write("				.then(res=>res.json())\r\n");
      out.write("				.then(function(data){\r\n");
      out.write("					if(data['result']>0){\r\n");
      out.write("						alert('댓글이 수정되었습니다.');\r\n");
      out.write("						location.href='noticeRead.jsp?idx=");
      out.print(idx);
      out.write("';\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function modifyCancel(modifyCommentDiv){\r\n");
      out.write("			modifyCommentDiv.parentNode.parentNode.parentNode.classList.remove('modifyActive');  \r\n");
      out.write("			modifyCommentDiv.parentNode.parentNode.remove();\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
